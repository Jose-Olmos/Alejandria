// <auto-generated />
using System;
using Alejandria.WebAPI.Implementation.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Alejandria.WebAPI.Implementation.Data.Migrations
{
    [DbContext(typeof(AlejandriaContext))]
    partial class AlejandriaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Alejandria.WebAPI.Implementation.Data.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("character varying");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("author");
                });

            modelBuilder.Entity("Alejandria.WebAPI.Implementation.Data.Entities.AuthorBook", b =>
                {
                    b.Property<Guid>("Author")
                        .HasColumnName("author")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Book")
                        .HasColumnName("book")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnName("publish-date")
                        .HasColumnType("date");

                    b.Property<DateTime>("ValidityDate")
                        .HasColumnName("validity-date")
                        .HasColumnType("date");

                    b.HasKey("Author", "Book")
                        .HasName("author_books_pk");

                    b.HasIndex("Book");

                    b.ToTable("author-book");
                });

            modelBuilder.Entity("Alejandria.WebAPI.Implementation.Data.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnName("genre")
                        .HasColumnType("character varying");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnName("summary")
                        .HasColumnType("character varying");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .HasName("books_title_idx");

                    b.ToTable("book");
                });

            modelBuilder.Entity("Alejandria.WebAPI.Implementation.Data.Entities.AuthorBook", b =>
                {
                    b.HasOne("Alejandria.WebAPI.Implementation.Data.Entities.Author", "AuthorNavigation")
                        .WithMany("AuthorBook")
                        .HasForeignKey("Author")
                        .HasConstraintName("author_books_fk_1")
                        .IsRequired();

                    b.HasOne("Alejandria.WebAPI.Implementation.Data.Entities.Book", "BookNavigation")
                        .WithMany("AuthorBook")
                        .HasForeignKey("Book")
                        .HasConstraintName("author_books_fk")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
